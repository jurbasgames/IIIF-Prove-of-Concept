# Generated by Django 5.0.7 on 2024-07-30 21:04

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(blank=True, db_index=True, max_length=50)),
                ('height', models.IntegerField(blank=True, editable=False, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('width', models.IntegerField(blank=True, editable=False, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('file', models.FileField(upload_to='data/images/')),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(blank=True, db_index=True, default='None', max_length=10)),
                ('value', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Canvas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.IntegerField()),
                ('width', models.IntegerField()),
                ('items', models.ManyToManyField(blank=True, related_name='canvases', to='app.image')),
                ('label', models.ManyToManyField(related_name='canvas_labels', to='app.label')),
            ],
            options={
                'verbose_name_plural': 'Canvases',
            },
        ),
        migrations.CreateModel(
            name='Manifest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.URLField(default='http://iiif.io/api/presentation/3/context.json')),
                ('items', models.ManyToManyField(blank=True, related_name='manifests', to='app.canvas')),
                ('label', models.ManyToManyField(related_name='manifest_labels', to='app.label')),
                ('summary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='manifest_summaries', to='app.label')),
            ],
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.ManyToManyField(related_name='metadata_labels', to='app.label')),
                ('manifest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='app.manifest')),
                ('value', models.ManyToManyField(related_name='metadata_values', to='app.label')),
            ],
        ),
        migrations.CreateModel(
            name='TextAnnotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motivation', models.CharField(choices=[('comment', 'Comentário'), ('tag', 'Tag'), ('scanning', 'Digitalização'), ('transcribing', 'Transcrição')], default='comment', max_length=255)),
                ('text', models.TextField()),
                ('language', models.CharField(db_index=True, max_length=10)),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('width', models.FloatField()),
                ('height', models.FloatField()),
                ('canvas', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.canvas')),
            ],
        ),
        migrations.AddField(
            model_name='canvas',
            name='annotations',
            field=models.ManyToManyField(blank=True, related_name='canvases', to='app.textannotation'),
        ),
    ]
